openapi: 3.0.1
info:
  title: BookStore API
  version: "1.0"
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /api/books:
    get:
      tags:
      - book-rest-controller
      operationId: findAll_1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
      - book-rest-controller
      operationId: updateBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Book'
    post:
      tags:
      - book-rest-controller
      operationId: addBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Book'
  /login:
    post:
      tags:
      - login-controller
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/customers:
    get:
      tags:
      - customer-rest-controller
      operationId: findAll
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
    post:
      tags:
      - customer-rest-controller
      operationId: addCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Customer'
  /api/customers/{customerId}/book/{bookId}:
    post:
      tags:
      - customer-rest-controller
      operationId: assignBookToCustomer
      parameters:
      - name: customerId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: bookId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Customer'
  /api/basket/clear:
    post:
      tags:
      - basket-rest-controller
      operationId: clearBasket
      parameters:
      - name: userId
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /api/basket/add:
    post:
      tags:
      - basket-rest-controller
      operationId: addToBasket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasketRequest'
        required: true
      responses:
        "200":
          description: OK
  /api/authors:
    get:
      tags:
      - author-rest-controller
      operationId: findAll_2
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    post:
      tags:
      - author-rest-controller
      operationId: addAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Author'
  /api/orders:
    get:
      tags:
      - customer-rest-controller
      operationId: getAllAssignedBooks
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssignedBookDTO'
  /api/customers/{customerId}:
    get:
      tags:
      - customer-rest-controller
      operationId: getCustomer
      parameters:
      - name: customerId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Customer'
    delete:
      tags:
      - customer-rest-controller
      operationId: deleteCustomer
      parameters:
      - name: customerId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/customers/{customerId}/books:
    get:
      tags:
      - customer-rest-controller
      operationId: getCustomerBooks
      parameters:
      - name: customerId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /api/books/{bookId}:
    get:
      tags:
      - book-rest-controller
      operationId: getBook
      parameters:
      - name: bookId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Book'
    delete:
      tags:
      - book-rest-controller
      operationId: deleteBook
      parameters:
      - name: bookId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/books/top3:
    get:
      tags:
      - book-rest-controller
      operationId: getTop3BySales
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /api/books/search/{keyword}:
    get:
      tags:
      - book-rest-controller
      operationId: findBookByName
      parameters:
      - name: keyword
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /api/basket:
    get:
      tags:
      - basket-rest-controller
      operationId: getBasketItems
      parameters:
      - name: userId
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /api/basket/remove/{userId}/{id}:
    delete:
      tags:
      - basket-rest-controller
      operationId: removeFromBasket
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
components:
  schemas:
    Author:
      type: object
      properties:
        idAuthor:
          type: integer
          format: int32
        name:
          type: string
        surname:
          type: string
    Book:
      type: object
      properties:
        idBook:
          type: integer
          format: int32
        name:
          type: string
        isbn:
          type: string
        price:
          type: number
          format: double
        quantity:
          type: integer
          format: int32
        sales:
          type: integer
          format: int32
        author:
          $ref: '#/components/schemas/Author'
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    Customer:
      type: object
      properties:
        idCustomer:
          type: integer
          format: int32
        name:
          type: string
        surname:
          type: string
        email:
          type: string
        assignedBooks:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Book'
    BasketRequest:
      type: object
      properties:
        userId:
          type: string
        book:
          $ref: '#/components/schemas/Book'
    AssignedBookDTO:
      type: object
      properties:
        bookId:
          type: integer
          format: int32
        bookName:
          type: string
        customerId:
          type: integer
          format: int32
        customerName:
          type: string
        customerSurname:
          type: string
        customerEmail:
          type: string
